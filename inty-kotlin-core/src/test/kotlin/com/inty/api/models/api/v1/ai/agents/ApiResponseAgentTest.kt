// File generated from our OpenAPI spec by Stainless.

package com.inty.api.models.api.v1.ai.agents

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.inty.api.core.JsonValue
import com.inty.api.core.jsonMapper
import com.inty.api.models.api.v1.users.profile.Gender
import com.inty.api.models.api.v1.users.profile.User
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ApiResponseAgentTest {

    @Test
    fun create() {
        val apiResponseAgent =
            ApiResponseAgent.builder()
                .code(0L)
                .data(
                    Agent.builder()
                        .id("id")
                        .createdAt(0L)
                        .gender("gender")
                        .name("name")
                        .readableId("readable_id")
                        .status(Agent.Status.PENDING)
                        .addAlternateGreeting("string")
                        .avatar("avatar")
                        .avatarSize(Agent.AvatarSize.builder().height(0L).width(0L).build())
                        .background("background")
                        .addBackgroundImage("string")
                        .backgroundSize(Agent.BackgroundSize.builder().height(0L).width(0L).build())
                        .category("category")
                        .characterBook(
                            Agent.CharacterBook.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .characterCardSpec("character_card_spec")
                        .characterVersion("character_version")
                        .connectorCount(0L)
                        .creator(
                            User.builder()
                                .id("id")
                                .authType("auth_type")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .isActive(true)
                                .readableId("readable_id")
                                .ageGroup("age_group")
                                .avatar("avatar")
                                .connectorCount(0L)
                                .description("description")
                                .email("email")
                                .followersCount(0L)
                                .gender(Gender.MALE)
                                .isSuperuser(true)
                                .nickname("nickname")
                                .phone("phone")
                                .publicAgentsCount(0L)
                                .systemLanguage("system_language")
                                .totalPublicAgentsFollows(0L)
                                .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .creatorId("creator_id")
                        .creatorNotes("creator_notes")
                        .deletedAt(0L)
                        .extensions(
                            Agent.Extensions.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .followerCount(0L)
                        .intro("intro")
                        .isFollowed(true)
                        .llmConfig(
                            ModelConfig.builder()
                                .apiKey("api_key")
                                .baseUrl("base_url")
                                .frequencyPenalty(-2.0)
                                .maxTokens(1L)
                                .model("model")
                                .presencePenalty(-2.0)
                                .temperature(0.0)
                                .topK(1L)
                                .topP(0.0)
                                .build()
                        )
                        .mainPrompt("main_prompt")
                        .messageExample("message_example")
                        .metaData(AgentMetaData.builder().comment("comment").score(0L).build())
                        .modePrompt("mode_prompt")
                        .opening("opening")
                        .openingAudioUrl("opening_audio_url")
                        .personality("personality")
                        .addPhoto("string")
                        .postHistoryInstructions("post_history_instructions")
                        .prompt("prompt")
                        .scenario("scenario")
                        .settings(
                            Agent.Settings.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .addTag("string")
                        .updatedAt(0L)
                        .user("user")
                        .visibility(AgentVisibility.PUBLIC)
                        .voiceId("voice_id")
                        .build()
                )
                .message("message")
                .build()

        assertThat(apiResponseAgent.code()).isEqualTo(0L)
        assertThat(apiResponseAgent.data())
            .isEqualTo(
                Agent.builder()
                    .id("id")
                    .createdAt(0L)
                    .gender("gender")
                    .name("name")
                    .readableId("readable_id")
                    .status(Agent.Status.PENDING)
                    .addAlternateGreeting("string")
                    .avatar("avatar")
                    .avatarSize(Agent.AvatarSize.builder().height(0L).width(0L).build())
                    .background("background")
                    .addBackgroundImage("string")
                    .backgroundSize(Agent.BackgroundSize.builder().height(0L).width(0L).build())
                    .category("category")
                    .characterBook(
                        Agent.CharacterBook.builder()
                            .putAdditionalProperty("foo", JsonValue.from("bar"))
                            .build()
                    )
                    .characterCardSpec("character_card_spec")
                    .characterVersion("character_version")
                    .connectorCount(0L)
                    .creator(
                        User.builder()
                            .id("id")
                            .authType("auth_type")
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .isActive(true)
                            .readableId("readable_id")
                            .ageGroup("age_group")
                            .avatar("avatar")
                            .connectorCount(0L)
                            .description("description")
                            .email("email")
                            .followersCount(0L)
                            .gender(Gender.MALE)
                            .isSuperuser(true)
                            .nickname("nickname")
                            .phone("phone")
                            .publicAgentsCount(0L)
                            .systemLanguage("system_language")
                            .totalPublicAgentsFollows(0L)
                            .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                    .creatorId("creator_id")
                    .creatorNotes("creator_notes")
                    .deletedAt(0L)
                    .extensions(
                        Agent.Extensions.builder()
                            .putAdditionalProperty("foo", JsonValue.from("bar"))
                            .build()
                    )
                    .followerCount(0L)
                    .intro("intro")
                    .isFollowed(true)
                    .llmConfig(
                        ModelConfig.builder()
                            .apiKey("api_key")
                            .baseUrl("base_url")
                            .frequencyPenalty(-2.0)
                            .maxTokens(1L)
                            .model("model")
                            .presencePenalty(-2.0)
                            .temperature(0.0)
                            .topK(1L)
                            .topP(0.0)
                            .build()
                    )
                    .mainPrompt("main_prompt")
                    .messageExample("message_example")
                    .metaData(AgentMetaData.builder().comment("comment").score(0L).build())
                    .modePrompt("mode_prompt")
                    .opening("opening")
                    .openingAudioUrl("opening_audio_url")
                    .personality("personality")
                    .addPhoto("string")
                    .postHistoryInstructions("post_history_instructions")
                    .prompt("prompt")
                    .scenario("scenario")
                    .settings(
                        Agent.Settings.builder()
                            .putAdditionalProperty("foo", JsonValue.from("bar"))
                            .build()
                    )
                    .addTag("string")
                    .updatedAt(0L)
                    .user("user")
                    .visibility(AgentVisibility.PUBLIC)
                    .voiceId("voice_id")
                    .build()
            )
        assertThat(apiResponseAgent.message()).isEqualTo("message")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val apiResponseAgent =
            ApiResponseAgent.builder()
                .code(0L)
                .data(
                    Agent.builder()
                        .id("id")
                        .createdAt(0L)
                        .gender("gender")
                        .name("name")
                        .readableId("readable_id")
                        .status(Agent.Status.PENDING)
                        .addAlternateGreeting("string")
                        .avatar("avatar")
                        .avatarSize(Agent.AvatarSize.builder().height(0L).width(0L).build())
                        .background("background")
                        .addBackgroundImage("string")
                        .backgroundSize(Agent.BackgroundSize.builder().height(0L).width(0L).build())
                        .category("category")
                        .characterBook(
                            Agent.CharacterBook.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .characterCardSpec("character_card_spec")
                        .characterVersion("character_version")
                        .connectorCount(0L)
                        .creator(
                            User.builder()
                                .id("id")
                                .authType("auth_type")
                                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .isActive(true)
                                .readableId("readable_id")
                                .ageGroup("age_group")
                                .avatar("avatar")
                                .connectorCount(0L)
                                .description("description")
                                .email("email")
                                .followersCount(0L)
                                .gender(Gender.MALE)
                                .isSuperuser(true)
                                .nickname("nickname")
                                .phone("phone")
                                .publicAgentsCount(0L)
                                .systemLanguage("system_language")
                                .totalPublicAgentsFollows(0L)
                                .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                                .build()
                        )
                        .creatorId("creator_id")
                        .creatorNotes("creator_notes")
                        .deletedAt(0L)
                        .extensions(
                            Agent.Extensions.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .followerCount(0L)
                        .intro("intro")
                        .isFollowed(true)
                        .llmConfig(
                            ModelConfig.builder()
                                .apiKey("api_key")
                                .baseUrl("base_url")
                                .frequencyPenalty(-2.0)
                                .maxTokens(1L)
                                .model("model")
                                .presencePenalty(-2.0)
                                .temperature(0.0)
                                .topK(1L)
                                .topP(0.0)
                                .build()
                        )
                        .mainPrompt("main_prompt")
                        .messageExample("message_example")
                        .metaData(AgentMetaData.builder().comment("comment").score(0L).build())
                        .modePrompt("mode_prompt")
                        .opening("opening")
                        .openingAudioUrl("opening_audio_url")
                        .personality("personality")
                        .addPhoto("string")
                        .postHistoryInstructions("post_history_instructions")
                        .prompt("prompt")
                        .scenario("scenario")
                        .settings(
                            Agent.Settings.builder()
                                .putAdditionalProperty("foo", JsonValue.from("bar"))
                                .build()
                        )
                        .addTag("string")
                        .updatedAt(0L)
                        .user("user")
                        .visibility(AgentVisibility.PUBLIC)
                        .voiceId("voice_id")
                        .build()
                )
                .message("message")
                .build()

        val roundtrippedApiResponseAgent =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(apiResponseAgent),
                jacksonTypeRef<ApiResponseAgent>(),
            )

        assertThat(roundtrippedApiResponseAgent).isEqualTo(apiResponseAgent)
    }
}
