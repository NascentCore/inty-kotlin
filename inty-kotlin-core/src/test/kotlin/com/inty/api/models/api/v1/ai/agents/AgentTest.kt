// File generated from our OpenAPI spec by Stainless.

package com.inty.api.models.api.v1.ai.agents

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.inty.api.core.JsonValue
import com.inty.api.core.jsonMapper
import com.inty.api.models.api.v1.users.profile.Gender
import com.inty.api.models.api.v1.users.profile.User
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class AgentTest {

    @Test
    fun create() {
        val agent =
            Agent.builder()
                .id("id")
                .createdAt(0L)
                .gender("gender")
                .name("name")
                .readableId("readable_id")
                .status(Agent.Status.PENDING)
                .addAlternateGreeting("string")
                .avatar("avatar")
                .avatarSize(Agent.AvatarSize.builder().height(0L).width(0L).build())
                .background("background")
                .addBackgroundImage("string")
                .backgroundSize(Agent.BackgroundSize.builder().height(0L).width(0L).build())
                .category("category")
                .characterBook(
                    Agent.CharacterBook.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .characterCardSpec("character_card_spec")
                .characterVersion("character_version")
                .connectorCount(0L)
                .creator(
                    User.builder()
                        .id("id")
                        .authType("auth_type")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .isActive(true)
                        .readableId("readable_id")
                        .ageGroup("age_group")
                        .avatar("avatar")
                        .connectorCount(0L)
                        .description("description")
                        .email("email")
                        .followersCount(0L)
                        .gender(Gender.MALE)
                        .isSuperuser(true)
                        .nickname("nickname")
                        .phone("phone")
                        .publicAgentsCount(0L)
                        .systemLanguage("system_language")
                        .totalPublicAgentsFollows(0L)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .creatorId("creator_id")
                .creatorNotes("creator_notes")
                .deletedAt(0L)
                .extensions(
                    Agent.Extensions.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .followerCount(0L)
                .intro("intro")
                .isFollowed(true)
                .llmConfig(
                    ModelConfig.builder()
                        .apiKey("api_key")
                        .baseUrl("base_url")
                        .frequencyPenalty(-2.0)
                        .maxTokens(1L)
                        .model("model")
                        .presencePenalty(-2.0)
                        .temperature(0.0)
                        .topK(1L)
                        .topP(0.0)
                        .build()
                )
                .mainPrompt("main_prompt")
                .messageExample("message_example")
                .metaData(Agent.MetaData.builder().comment("comment").score(1L).build())
                .modePrompt("mode_prompt")
                .opening("opening")
                .openingAudioUrl("opening_audio_url")
                .personality("personality")
                .addPhoto("string")
                .postHistoryInstructions("post_history_instructions")
                .prompt("prompt")
                .scenario("scenario")
                .settings(
                    Agent.Settings.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .addTag("string")
                .updatedAt(0L)
                .visibility(AgentVisibility.PUBLIC)
                .voiceId("voice_id")
                .build()

        assertThat(agent.id()).isEqualTo("id")
        assertThat(agent.createdAt()).isEqualTo(0L)
        assertThat(agent.gender()).isEqualTo("gender")
        assertThat(agent.name()).isEqualTo("name")
        assertThat(agent.readableId()).isEqualTo("readable_id")
        assertThat(agent.status()).isEqualTo(Agent.Status.PENDING)
        assertThat(agent.alternateGreetings()).containsExactly("string")
        assertThat(agent.avatar()).isEqualTo("avatar")
        assertThat(agent.avatarSize())
            .isEqualTo(Agent.AvatarSize.builder().height(0L).width(0L).build())
        assertThat(agent.background()).isEqualTo("background")
        assertThat(agent.backgroundImages()).containsExactly("string")
        assertThat(agent.backgroundSize())
            .isEqualTo(Agent.BackgroundSize.builder().height(0L).width(0L).build())
        assertThat(agent.category()).isEqualTo("category")
        assertThat(agent.characterBook())
            .isEqualTo(
                Agent.CharacterBook.builder()
                    .putAdditionalProperty("foo", JsonValue.from("bar"))
                    .build()
            )
        assertThat(agent.characterCardSpec()).isEqualTo("character_card_spec")
        assertThat(agent.characterVersion()).isEqualTo("character_version")
        assertThat(agent.connectorCount()).isEqualTo(0L)
        assertThat(agent.creator())
            .isEqualTo(
                User.builder()
                    .id("id")
                    .authType("auth_type")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .isActive(true)
                    .readableId("readable_id")
                    .ageGroup("age_group")
                    .avatar("avatar")
                    .connectorCount(0L)
                    .description("description")
                    .email("email")
                    .followersCount(0L)
                    .gender(Gender.MALE)
                    .isSuperuser(true)
                    .nickname("nickname")
                    .phone("phone")
                    .publicAgentsCount(0L)
                    .systemLanguage("system_language")
                    .totalPublicAgentsFollows(0L)
                    .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(agent.creatorId()).isEqualTo("creator_id")
        assertThat(agent.creatorNotes()).isEqualTo("creator_notes")
        assertThat(agent.deletedAt()).isEqualTo(0L)
        assertThat(agent.extensions())
            .isEqualTo(
                Agent.Extensions.builder()
                    .putAdditionalProperty("foo", JsonValue.from("bar"))
                    .build()
            )
        assertThat(agent.followerCount()).isEqualTo(0L)
        assertThat(agent.intro()).isEqualTo("intro")
        assertThat(agent.isFollowed()).isEqualTo(true)
        assertThat(agent.llmConfig())
            .isEqualTo(
                ModelConfig.builder()
                    .apiKey("api_key")
                    .baseUrl("base_url")
                    .frequencyPenalty(-2.0)
                    .maxTokens(1L)
                    .model("model")
                    .presencePenalty(-2.0)
                    .temperature(0.0)
                    .topK(1L)
                    .topP(0.0)
                    .build()
            )
        assertThat(agent.mainPrompt()).isEqualTo("main_prompt")
        assertThat(agent.messageExample()).isEqualTo("message_example")
        assertThat(agent.metaData())
            .isEqualTo(Agent.MetaData.builder().comment("comment").score(1L).build())
        assertThat(agent.modePrompt()).isEqualTo("mode_prompt")
        assertThat(agent.opening()).isEqualTo("opening")
        assertThat(agent.openingAudioUrl()).isEqualTo("opening_audio_url")
        assertThat(agent.personality()).isEqualTo("personality")
        assertThat(agent.photos()).containsExactly("string")
        assertThat(agent.postHistoryInstructions()).isEqualTo("post_history_instructions")
        assertThat(agent.prompt()).isEqualTo("prompt")
        assertThat(agent.scenario()).isEqualTo("scenario")
        assertThat(agent.settings())
            .isEqualTo(
                Agent.Settings.builder().putAdditionalProperty("foo", JsonValue.from("bar")).build()
            )
        assertThat(agent.tags()).containsExactly("string")
        assertThat(agent.updatedAt()).isEqualTo(0L)
        assertThat(agent.visibility()).isEqualTo(AgentVisibility.PUBLIC)
        assertThat(agent.voiceId()).isEqualTo("voice_id")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val agent =
            Agent.builder()
                .id("id")
                .createdAt(0L)
                .gender("gender")
                .name("name")
                .readableId("readable_id")
                .status(Agent.Status.PENDING)
                .addAlternateGreeting("string")
                .avatar("avatar")
                .avatarSize(Agent.AvatarSize.builder().height(0L).width(0L).build())
                .background("background")
                .addBackgroundImage("string")
                .backgroundSize(Agent.BackgroundSize.builder().height(0L).width(0L).build())
                .category("category")
                .characterBook(
                    Agent.CharacterBook.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .characterCardSpec("character_card_spec")
                .characterVersion("character_version")
                .connectorCount(0L)
                .creator(
                    User.builder()
                        .id("id")
                        .authType("auth_type")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .isActive(true)
                        .readableId("readable_id")
                        .ageGroup("age_group")
                        .avatar("avatar")
                        .connectorCount(0L)
                        .description("description")
                        .email("email")
                        .followersCount(0L)
                        .gender(Gender.MALE)
                        .isSuperuser(true)
                        .nickname("nickname")
                        .phone("phone")
                        .publicAgentsCount(0L)
                        .systemLanguage("system_language")
                        .totalPublicAgentsFollows(0L)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .creatorId("creator_id")
                .creatorNotes("creator_notes")
                .deletedAt(0L)
                .extensions(
                    Agent.Extensions.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .followerCount(0L)
                .intro("intro")
                .isFollowed(true)
                .llmConfig(
                    ModelConfig.builder()
                        .apiKey("api_key")
                        .baseUrl("base_url")
                        .frequencyPenalty(-2.0)
                        .maxTokens(1L)
                        .model("model")
                        .presencePenalty(-2.0)
                        .temperature(0.0)
                        .topK(1L)
                        .topP(0.0)
                        .build()
                )
                .mainPrompt("main_prompt")
                .messageExample("message_example")
                .metaData(Agent.MetaData.builder().comment("comment").score(1L).build())
                .modePrompt("mode_prompt")
                .opening("opening")
                .openingAudioUrl("opening_audio_url")
                .personality("personality")
                .addPhoto("string")
                .postHistoryInstructions("post_history_instructions")
                .prompt("prompt")
                .scenario("scenario")
                .settings(
                    Agent.Settings.builder()
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .build()
                )
                .addTag("string")
                .updatedAt(0L)
                .visibility(AgentVisibility.PUBLIC)
                .voiceId("voice_id")
                .build()

        val roundtrippedAgent =
            jsonMapper.readValue(jsonMapper.writeValueAsString(agent), jacksonTypeRef<Agent>())

        assertThat(roundtrippedAgent).isEqualTo(agent)
    }
}
